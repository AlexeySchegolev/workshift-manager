import { Entity, Column, PrimaryGeneratedColumn, CreateDateColumn, UpdateDateColumn, OneToMany, ManyToOne, JoinColumn } from 'typeorm';
import { Organization } from './organization.entity';
import { User } from './user.entity';
import { Shift } from './shift.entity';
import { ShiftAssignment } from './shift-assignment.entity';
import { ConstraintViolation } from './constraint-violation.entity';

export interface DayShiftPlan {
  /** Shift name mapped to array of employee IDs */
  [shiftName: string]: string[];
}

export interface MonthlyShiftPlan {
  /** Date key in DD.MM.YYYY format mapped to day shift plan */
  [dateKey: string]: DayShiftPlan | null;
}

export enum ShiftPlanStatus {
  DRAFT = 'draft',
  IN_REVIEW = 'in_review',
  APPROVED = 'approved',
  PUBLISHED = 'published',
  ACTIVE = 'active',
  COMPLETED = 'completed',
  CANCELLED = 'cancelled'
}

export enum ApprovalStatus {
  PENDING = 'pending',
  APPROVED = 'approved',
  REJECTED = 'rejected',
  NEEDS_REVISION = 'needs_revision'
}

@Entity('shift_plans')
export class ShiftPlan {
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @Column({ name: 'organization_id', type: 'uuid' })
  organizationId: string;

  @Column({ type: 'varchar', length: 255 })
  name: string;

  @Column({ type: 'varchar', length: 500, nullable: true })
  description?: string;

  @Column({ type: 'integer' })
  year: number;

  @Column({ type: 'integer' })
  month: number;

  @Column({ name: 'planning_period_start', type: 'date' })
  planningPeriodStart: Date;

  @Column({ name: 'planning_period_end', type: 'date' })
  planningPeriodEnd: Date;

  @Column({
    type: 'enum',
    enum: ShiftPlanStatus,
    default: ShiftPlanStatus.DRAFT,
  })
  status: ShiftPlanStatus;

  @Column({
    name: 'approval_status',
    type: 'enum',
    enum: ApprovalStatus,
    default: ApprovalStatus.PENDING,
  })
  approvalStatus: ApprovalStatus;

  @Column({
    name: 'plan_data',
    type: 'jsonb',
    nullable: true
  })
  planData: MonthlyShiftPlan;

  @Column({
    name: 'metadata',
    type: 'jsonb',
    default: {}
  })
  metadata: Record<string, any>;

  @Column({ name: 'total_shifts', type: 'integer', default: 0 })
  totalShifts: number;

  @Column({ name: 'total_hours', type: 'decimal', precision: 10, scale: 2, default: 0 })
  totalHours: number;

  @Column({ name: 'total_employees', type: 'integer', default: 0 })
  totalEmployees: number;

  @Column({ name: 'coverage_percentage', type: 'decimal', precision: 5, scale: 2, default: 0 })
  coveragePercentage: number;

  @Column({ name: 'constraint_violations', type: 'integer', default: 0 })
  constraintViolations: number;

  @Column({ name: 'is_published', type: 'boolean', default: false })
  isPublished: boolean;

  @Column({ name: 'published_at', type: 'timestamp', nullable: true })
  publishedAt?: Date;

  @Column({ name: 'published_by', type: 'uuid', nullable: true })
  publishedBy?: string;

  @Column({ name: 'approved_at', type: 'timestamp', nullable: true })
  approvedAt?: Date;

  @Column({ name: 'approved_by', type: 'uuid', nullable: true })
  approvedBy?: string;

  @Column({ name: 'rejection_reason', type: 'text', nullable: true })
  rejectionReason?: string;

  @Column({ name: 'version', type: 'integer', default: 1 })
  version: number;

  @Column({ name: 'parent_plan_id', type: 'uuid', nullable: true })
  parentPlanId?: string; // For versioning/revisions

  @Column({ name: 'is_template', type: 'boolean', default: false })
  isTemplate: boolean;

  @Column({ name: 'template_name', type: 'varchar', length: 255, nullable: true })
  templateName?: string;

  @Column({ name: 'auto_generated', type: 'boolean', default: false })
  autoGenerated: boolean;

  @Column({ name: 'generation_algorithm', type: 'varchar', length: 100, nullable: true })
  generationAlgorithm?: string;

  @Column({
    name: 'generation_parameters',
    type: 'jsonb',
    default: {}
  })
  generationParameters: Record<string, any>;

  @Column({ name: 'created_by', type: 'uuid', nullable: true })
  createdBy?: string;

  @Column({ name: 'updated_by', type: 'uuid', nullable: true })
  updatedBy?: string;

  // Relationships
  @ManyToOne(() => Organization, organization => organization.shiftPlans)
  @JoinColumn({ name: 'organization_id' })
  organization: Organization;

  @ManyToOne(() => User, user => user.createdShiftPlans, { nullable: true })
  @JoinColumn({ name: 'created_by' })
  createdByUser?: User;

  @ManyToOne(() => User, { nullable: true })
  @JoinColumn({ name: 'published_by' })
  publishedByUser?: User;

  @ManyToOne(() => User, { nullable: true })
  @JoinColumn({ name: 'approved_by' })
  approvedByUser?: User;

  @ManyToOne(() => ShiftPlan, { nullable: true })
  @JoinColumn({ name: 'parent_plan_id' })
  parentPlan?: ShiftPlan;

  @OneToMany(() => ShiftPlan, shiftPlan => shiftPlan.parentPlan)
  childPlans: ShiftPlan[];

  @OneToMany(() => Shift, shift => shift.shiftPlan)
  shifts: Shift[];

  @OneToMany(() => ShiftAssignment, assignment => assignment.shiftPlan)
  assignments: ShiftAssignment[];

  @OneToMany(() => ConstraintViolation, violation => violation.shiftPlan)
  violations: ConstraintViolation[];

  @CreateDateColumn({ name: 'created_at' })
  createdAt: Date;

  @UpdateDateColumn({ name: 'updated_at' })
  updatedAt: Date;

  @Column({ name: 'deleted_at', type: 'timestamp', nullable: true })
  deletedAt?: Date;

  // Virtual fields
  get isActive(): boolean {
    return this.status === ShiftPlanStatus.ACTIVE && !this.deletedAt;
  }

  get isEditable(): boolean {
    return [ShiftPlanStatus.DRAFT, ShiftPlanStatus.IN_REVIEW].includes(this.status) && !this.isPublished;
  }

  get planningPeriodDays(): number {
    return Math.ceil((this.planningPeriodEnd.getTime() - this.planningPeriodStart.getTime()) / (1000 * 60 * 60 * 24)) + 1;
  }

  get averageHoursPerDay(): number {
    return this.planningPeriodDays > 0 ? Number(this.totalHours) / this.planningPeriodDays : 0;
  }

  get displayName(): string {
    return `${this.name} (${this.year}-${String(this.month).padStart(2, '0')})`;
  }
}